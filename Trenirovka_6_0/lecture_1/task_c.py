# Надпись на табло
# Вы получили доступ к одной из камер наблюдения в особо секретной огранизации. В зоне видимости камеры находится табло,
# с которого вы постоянно считываете информацию. Теперь вам нужно написать программу, которая по состоянию табло
# определяет, какая буква изображена на нём в данный момент. Табло представляет из себя квадратную таблицу, разбитую
# на n×n равных квадратных светодиодов. Каждый диод либо включён, либо выключен. Введём систему координат, направив ось
# OX вправо, а ось OY — вверх, приняв сторону диода равной 1.
# На табло могут быть изображены только следующие буквы:
# I — прямоугольник из горящих диодов.
# O — прямоугольник из горящих диодов с углами (x1,y1) и (x2,y2), внутри которого есть прямоугольник из выключенных
# диодов с координатами углов (x3,y3) и (x4,y4). При этом границы выключенного прямоугольника не должны касаться внешнего
# С — прямоугольник из горящих диодов с углами (x1,y1) и (x2,y2), внутри которого есть прямоугольник из выключенных
# диодов с координатами углов (x3,y3) и (x4,y4). При этом правая граница выключенного прямоугольника находится на правой
# границе внешнего прямоугольника
# L — прямоугольник из горящих диодов с углами (x1,y1) и (x2,y2), внутри которого есть прямоугольник из выключенных
# диодов с координатами углов (x3,y3) и (x4,y4). При этом правые верхние углы выключенного прямоугольника и внешнего
# прямоугольника совпадают
# H — прямоугольник из горящих диодов с углами (x1,y1) и (x2,y2), внутри которого находятся 2 прямоугольника из
# выключенных диодов с координатами углов (x3,y3), (x4,y4) у первого и (x5,y5), (x6,y6) у второго. При этом выключенные
# прямоугольники должны иметь одинаковую ширину, находиться строго один под другим, один прямоугольник должен касаться
# верхней стороны, а другой прямоугольник должен касаться нижней стороны внешнего прямоугольника,
# Р — прямоугольник из горящих диодов с углами (x1,y1) и (x2,y2), внутри которого находятся 2 прямоугольника из
# выключенных диодов с координатами углов (x3,y3), (x4,y4) у первого и (x5,y5), (x6,y6) у второго. При этом правый
# нижний угол первого выключенного прямоугольника должен совпадать с правым нижним углом внешнего прямоугольника,
# а другой выключенный прямоугольник должен находиться строго выше и не касаться границ других прямоугольников,
# также левые границы двух выключенных прямоугольников должны совпадать
# Любое другое состояние табло считается буквой X.
# По виду табло определите, какая буква на нём изображена.
# Формат ввода
# В первой строке входных данных находится одно число n (1≤n≤10) — сторона табло.
# В следующих n строках находятся строки длины n из символов «.» и «#» — строки таблицы. «.» обозначает выключенный
# # квадратный диод табло, а «#» — горящий.
# Формат вывода
# Программа должна вывести единственный символ: если данная таблица подходит под одно из описаний букв I, O, C, L, H, P,
# то выведите её (все буквы — английские). Если же данная таблица не подходит ни под какие условия, то выведите X.
# Пример 1
# Ввод	Вывод
# 4       I
# .##.
# .##.
# .##.
# ....
# Пример 2
# Ввод	Вывод
# 5       X
# #...#
# .#.#.
# ..#..
# .#.#.
# #...#

# Мое решение. Ищу границы прямоугольника из включенных диодов. Если на этом этапе есть отклонения, то уже X. Затем внутри
# ищу прямоугольники из выключенных. В зависимости от количества проверяю условия на соответствие буквам.
def turn_on(array: list) -> tuple[int, int, int, int] | None:
    x1, y1, x2, y2 = -1, -1, -1, -1
    lefts = []
    rights = []
    for i, row in enumerate(array):
        left = row.find('#')
        right = row.rfind('#')
        if left != -1:
            lefts.append(left)
            if y1 == -1:
                y1 = i
            if y2 != -1:
                return None
        if right != -1:
            rights.append(right)
        if left == -1 and y1 != -1 and y2 == -1:
            y2 = i - 1
    if y1 != -1 and y2 == -1:
        y2 = len(array) - 1
    if not lefts:
        return None
    return min(lefts), y1, max(rights), y2


def find_rect(array, x1, y1, x2, y2) -> tuple[int, int, int, int] | None | int:
    x3, y3, x4, y4 = -1, -1, -1, -1
    lefts = []
    rights = []
    cnt_off = 0
    for i in range(y1, y2 + 1):
        row = array[i][x1: x2 + 1]
        left = row.find('.')
        right = row.rfind('.')
        cnt_off += row.count('.')
        if left != -1:
            lefts.append(left + x1)
            if y3 == -1:
                y3 = i
        if right != -1:
            rights.append(right + x1)
        if left == -1 and y3 != -1 and y4 == -1:
            y4 = i - 1
            break
    if y3 != -1 and y4 == -1:
        y4 = y2
    if cnt_off == 0:
        return 0
    x3 = min(lefts)
    x4 = max(rights)
    if cnt_off < (x4 - x3 + 1) * (y4 - y3 + 1):
        return None
    return x3, y3, x4, y4



def cnt_turn_of(array, x1, y1, x2, y2) -> list[tuple] | None | int:
    cnt = 0
    rectangles = []
    rect = find_rect(array, x1, y1, x2, y2)
    while rect is not None:
        if rect != 0:
            cnt += 1
            x3, y3, x4, y4 = rect
            rectangles.append((x3, y3, x4, y4))
            if y4 < y2:
                rect = find_rect(array, x1, y4 + 1, x2, y2)
                continue
            else:
                return rectangles
        else:
            if cnt == 0:
                return 0
            else:
                return rectangles
    return None


n = int(input())
matrix = [input() for _ in range(n)]
turn_on_rect = turn_on(matrix)
if not turn_on_rect:
    print('X')
else:
    x1, y1, x2, y2 = turn_on_rect
    rectangles = cnt_turn_of(matrix, x1, y1, x2, y2)
    if rectangles is None:
        print('X')
    elif rectangles == 0:
        print('I')
    elif len(rectangles) == 1:
        x3, y3, x4, y4 = rectangles[0]
        if x3 > x1 and x4 < x2 and y3 > y1 and y4 < y2:
            print('O')
        elif x3 > x1 and x4 == x2 and y3 > y1 and y4 < y2:
            print('C')
        elif x3 > x1 and x4 == x2 and y3 == y1 and y4 < y2:
            print('L')
        else:
            print('X')
    elif len(rectangles) == 2:
        x3, y3, x4, y4 = rectangles[0]
        x5, y5, x6, y6 = rectangles[1]
        if x3 == x5 and x4 == x6 and x3 > x1 and x6 < x2 and y3 == y1 and y4 < y5 and y6 == y2:
            print('H')
        elif x3 == x5 and x4 < x6 and x3 > x1 and x6 == x2 and y3 > y1 and y4 < y5 and y6 == y2:
            print('P')
        else:
            print('X')
    else:
        print('X')
